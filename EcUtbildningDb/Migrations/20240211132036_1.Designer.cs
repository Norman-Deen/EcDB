// <auto-generated />
using System;
using EcDB.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcDB.Migrations
{
    [DbContext(typeof(AppSettings))]
    [Migration("20240211132036_1")]
    partial class _1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcDB.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            CourseName = "Front End",
                            Description = "HTML, CSS, JS for UI. React, Vue.js exploration.",
                            Duration = "1 yr",
                            SchoolId = 1
                        },
                        new
                        {
                            CourseId = 2,
                            CourseName = "Data Scientist",
                            Description = "Node.js, Django, SQL, NoSQL, API design.",
                            Duration = "2 yrs",
                            SchoolId = 2
                        },
                        new
                        {
                            CourseId = 3,
                            CourseName = "Full Stack",
                            Description = "Front-end and back-end mastery. Web app development.",
                            Duration = "3 yrs",
                            SchoolId = 3
                        },
                        new
                        {
                            CourseId = 4,
                            CourseName = "BIM",
                            Description = "Building Information Modeling basics.",
                            Duration = "1 yr",
                            SchoolId = 4
                        },
                        new
                        {
                            CourseId = 5,
                            CourseName = "IT",
                            Description = "IT essentials, network admin, cybersecurity.",
                            Duration = "1 yr",
                            SchoolId = 5
                        });
                });

            modelBuilder.Entity("EcDB.Entities.CoursePlan", b =>
                {
                    b.Property<int>("CoursePlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoursePlanId"));

                    b.Property<int?>("CourseId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CoursePlanDetails")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("VARCHAR");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("CoursePlanId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("CoursePlans");

                    b.HasData(
                        new
                        {
                            CoursePlanId = 1,
                            CourseId = 1,
                            CoursePlanDetails = "Frontend Dev 1, Frontend Dev 2, Exam Project, HTML/CSS, JS 1, JS 2, JS 3, LIA Frontend Dev, Agile Methods, UX Design"
                        },
                        new
                        {
                            CoursePlanId = 2,
                            CourseId = 2,
                            CoursePlanDetails = "Prep Math; Stats and AI, Python Programming and Stats Analysis, SQL, Business Intelligence, Machine Learning, R Programming, Deep Learning, Python Programming Advanced, Data Science Project, LIA Internship, Thesis"
                        },
                        new
                        {
                            CoursePlanId = 3,
                            CourseId = 3,
                            CoursePlanDetails = "Full Stack: 3 years of front-end and back-end mastery, focusing on web app development."
                        },
                        new
                        {
                            CoursePlanId = 4,
                            CourseId = 4,
                            CoursePlanDetails = "BIM Basics: Learn the fundamentals of Building Information Modeling in a year-long course."
                        },
                        new
                        {
                            CoursePlanId = 5,
                            CourseId = 5,
                            CoursePlanDetails = "IT Essentials: Essentials of Information Technology in a one-year course, covering network admin and cybersecurity."
                        });
                });

            modelBuilder.Entity("EcDB.Entities.Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructorId"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("InstructorId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            InstructorId = 1,
                            Address = "123 Main St",
                            CourseId = 1,
                            Email = "hans@example.com",
                            Name = "Hans Mattin-Lassei",
                            Phone = "123-456-7890",
                            SchoolId = 1
                        },
                        new
                        {
                            InstructorId = 2,
                            Address = "456 Oak Ave",
                            CourseId = 2,
                            Email = "tommy@example.com",
                            Name = "Tommy Mattin-Lassei",
                            Phone = "987-654-3210",
                            SchoolId = 2
                        },
                        new
                        {
                            InstructorId = 3,
                            Address = "789 Elm Blvd",
                            CourseId = 3,
                            Email = "joakim@example.com",
                            Name = "Joakim Lindh",
                            Phone = "555-123-4567",
                            SchoolId = 3
                        },
                        new
                        {
                            InstructorId = 4,
                            Address = "101 Pine St",
                            CourseId = 4,
                            Email = "robert@example.com",
                            Name = "Robert Tublén",
                            Phone = "777-888-9999",
                            SchoolId = 4
                        },
                        new
                        {
                            InstructorId = 5,
                            Address = "202 Cedar Ave",
                            CourseId = 5,
                            Email = "therese@example.com",
                            Name = "Therese Lidbom",
                            Phone = "111-222-3333",
                            SchoolId = 5
                        },
                        new
                        {
                            InstructorId = 6,
                            Address = "303 Birch Blvd",
                            CourseId = 1,
                            Email = "adam@example.com",
                            Name = "Adam Olaso",
                            Phone = "444-555-6666",
                            SchoolId = 1
                        },
                        new
                        {
                            InstructorId = 7,
                            Address = "404 Maple St",
                            CourseId = 2,
                            Email = "morgan@example.com",
                            Name = "Morgan Kostav",
                            Phone = "999-888-7777",
                            SchoolId = 2
                        },
                        new
                        {
                            InstructorId = 8,
                            Address = "505 Oak Ave",
                            CourseId = 3,
                            Email = "burim@example.com",
                            Name = "Burim Fatit",
                            Phone = "333-222-1111",
                            SchoolId = 3
                        },
                        new
                        {
                            InstructorId = 9,
                            Address = "606 Pine St",
                            CourseId = 4,
                            Email = "jorjan@example.com",
                            Name = "Jorjan Moland",
                            Phone = "666-777-8888",
                            SchoolId = 4
                        },
                        new
                        {
                            InstructorId = 10,
                            Address = "707 Elm Blvd",
                            CourseId = 5,
                            Email = "balushi@example.com",
                            Name = "Balushi Jeto",
                            Phone = "123-456-7890",
                            SchoolId = 5
                        });
                });

            modelBuilder.Entity("EcDB.Entities.School", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchoolId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.HasKey("SchoolId");

                    b.ToTable("Schools", (string)null);

                    b.HasData(
                        new
                        {
                            SchoolId = 1,
                            Address = "Halmstad",
                            PhoneNumber = "123-456-7890",
                            SchoolName = "EC Utbildning-HA",
                            Website = "http://www.ecutbildning-ha.com"
                        },
                        new
                        {
                            SchoolId = 2,
                            Address = "Malmö",
                            PhoneNumber = "987-654-3210",
                            SchoolName = "EC Utbildning-MA",
                            Website = "http://www.ecutbildning-ma.com"
                        },
                        new
                        {
                            SchoolId = 3,
                            Address = "Göteborg",
                            PhoneNumber = "555-123-4567",
                            SchoolName = "EC Utbildning-GO",
                            Website = "http://www.ecutbildning-go.com"
                        },
                        new
                        {
                            SchoolId = 4,
                            Address = "Örebro",
                            PhoneNumber = "777-888-9999",
                            SchoolName = "EC Utbildning-OR",
                            Website = "http://www.ecutbildning-or.com"
                        },
                        new
                        {
                            SchoolId = 5,
                            Address = "Stockholm",
                            PhoneNumber = "111-222-3333",
                            SchoolName = "EC Utbildning-ST",
                            Website = "http://www.ecutbildning-st.com"
                        });
                });

            modelBuilder.Entity("EcDB.Entities.Student", b =>
                {
                    b.Property<int?>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("StudentId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("VARCHAR");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            Address = "Address 1",
                            CourseId = 3,
                            Email = "nour.altinawi@example.com",
                            Grade = 90,
                            Name = "Nour Altinawi",
                            Phone = "123456789",
                            SchoolId = 1
                        },
                        new
                        {
                            StudentId = 2,
                            Address = "Address 2",
                            CourseId = 2,
                            Email = "liam.berg@example.com",
                            Grade = 80,
                            Name = "Liam Berg",
                            Phone = "987654321",
                            SchoolId = 2
                        },
                        new
                        {
                            StudentId = 3,
                            Address = "Address 3",
                            CourseId = 4,
                            Email = "olivia.carlsson@example.com",
                            Grade = 49,
                            Name = "Olivia Carlsson",
                            Phone = "555555555",
                            SchoolId = 3
                        },
                        new
                        {
                            StudentId = 4,
                            Address = "Address 4",
                            CourseId = 1,
                            Email = "hugo.dahl@example.com",
                            Grade = 85,
                            Name = "Hugo Dahl",
                            Phone = "123123123",
                            SchoolId = 4
                        },
                        new
                        {
                            StudentId = 5,
                            Address = "Address 5",
                            CourseId = 5,
                            Email = "amelia.eriksson@example.com",
                            Grade = 92,
                            Name = "Amelia Eriksson",
                            Phone = "987987987",
                            SchoolId = 5
                        },
                        new
                        {
                            StudentId = 6,
                            Address = "Address 6",
                            CourseId = 3,
                            Email = "zara.forsberg@example.com",
                            Grade = 45,
                            Name = "Zara Forsberg",
                            Phone = "777777777",
                            SchoolId = 3
                        });
                });

            modelBuilder.Entity("EcDB.Entities.Course", b =>
                {
                    b.HasOne("EcDB.Entities.School", "School")
                        .WithMany("Courses")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("School");
                });

            modelBuilder.Entity("EcDB.Entities.CoursePlan", b =>
                {
                    b.HasOne("EcDB.Entities.Course", "Course")
                        .WithMany("CoursePlans")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcDB.Entities.Student", null)
                        .WithMany("StudentGrades")
                        .HasForeignKey("StudentId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EcDB.Entities.Instructor", b =>
                {
                    b.HasOne("EcDB.Entities.Course", "Course")
                        .WithMany("Instructors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EcDB.Entities.School", "School")
                        .WithMany("Instructors")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Course");

                    b.Navigation("School");
                });

            modelBuilder.Entity("EcDB.Entities.Student", b =>
                {
                    b.HasOne("EcDB.Entities.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EcDB.Entities.School", "School")
                        .WithMany("Students")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Course");

                    b.Navigation("School");
                });

            modelBuilder.Entity("EcDB.Entities.Course", b =>
                {
                    b.Navigation("CoursePlans");

                    b.Navigation("Instructors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("EcDB.Entities.School", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Instructors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("EcDB.Entities.Student", b =>
                {
                    b.Navigation("StudentGrades");
                });
#pragma warning restore 612, 618
        }
    }
}
